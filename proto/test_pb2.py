# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: test.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='test.proto',
  package='proto',
  serialized_pb=_b('\n\ntest.proto\x12\x05proto\"#\n\x04Test\x12\x0c\n\x04guid\x18\x01 \x01(\x04\x12\r\n\x05\x63ount\x18\x02 \x01(\r\"$\n\x05Test1\x12\x0c\n\x04guid\x18\x01 \x01(\x04\x12\r\n\x05\x63ount\x18\x02 \x01(\r*!\n\x02ID\x12\x0c\n\x08MSG_Test\x10\x01\x12\r\n\tMSG_Test1\x10\x02')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

_ID = _descriptor.EnumDescriptor(
  name='ID',
  full_name='proto.ID',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='MSG_Test', index=0, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='MSG_Test1', index=1, number=2,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=96,
  serialized_end=129,
)
_sym_db.RegisterEnumDescriptor(_ID)

ID = enum_type_wrapper.EnumTypeWrapper(_ID)
MSG_Test = 1
MSG_Test1 = 2



_TEST = _descriptor.Descriptor(
  name='Test',
  full_name='proto.Test',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='guid', full_name='proto.Test.guid', index=0,
      number=1, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='count', full_name='proto.Test.count', index=1,
      number=2, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=21,
  serialized_end=56,
)


_TEST1 = _descriptor.Descriptor(
  name='Test1',
  full_name='proto.Test1',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='guid', full_name='proto.Test1.guid', index=0,
      number=1, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='count', full_name='proto.Test1.count', index=1,
      number=2, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=58,
  serialized_end=94,
)

DESCRIPTOR.message_types_by_name['Test'] = _TEST
DESCRIPTOR.message_types_by_name['Test1'] = _TEST1
DESCRIPTOR.enum_types_by_name['ID'] = _ID

Test = _reflection.GeneratedProtocolMessageType('Test', (_message.Message,), dict(
  DESCRIPTOR = _TEST,
  __module__ = 'test_pb2'
  # @@protoc_insertion_point(class_scope:proto.Test)
  ))
_sym_db.RegisterMessage(Test)

Test1 = _reflection.GeneratedProtocolMessageType('Test1', (_message.Message,), dict(
  DESCRIPTOR = _TEST1,
  __module__ = 'test_pb2'
  # @@protoc_insertion_point(class_scope:proto.Test1)
  ))
_sym_db.RegisterMessage(Test1)


# @@protoc_insertion_point(module_scope)
